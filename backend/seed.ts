// backend/seed.ts

import 'dotenv/config'; // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏•‡∏î Environment Variables
import mongoose from 'mongoose'; // Mongoose ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö MongoDB ODM

// Import Mongoose Models (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏° .js ‡∏ó‡πâ‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå)
import Product from './models/Product.js'; 
import Partner from './models/Partner.js'; 
import Category from './models/Category.js'; 
import News from './models/News.js';

import { products, partners, categories } from '../backend/data/products.js'; 
import { newsItems } from '../backend/data/news.js'


async function seedDatabase() {
    try {
        console.log('Attempting to connect to MongoDB...');
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ MONGO_URI ‡∏ñ‡∏π‡∏Å‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ß‡πâ‡πÉ‡∏ô .env file
        const mongoUri = process.env.MONGO_URI;
        if (!mongoUri) {
            throw new Error('MONGO_URI is not defined in .env file!');
        }
        await mongoose.connect(mongoUri); // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö MongoDB
        console.log('MongoDB connected successfully for seeding!');

        // --- Clear existing data ---
        console.log('Clearing existing data from collections...');
        await Product.deleteMany({}); // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Products ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        await Partner.deleteMany({}); // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Partners ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        await Category.deleteMany({}); // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Categories ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        await News.deleteMany({}); // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• News Items ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        console.log('Old data cleared from all collections.');

        // --- Insert new data ---
        console.log('Starting data insertion...');

        // Insert Products
        try {
            if (products && products.length > 0) {
                const insertedProducts = await Product.insertMany(products);
                console.log(`‚úÖ Successfully inserted ${insertedProducts.length} products.`);
            } else {
                console.warn('‚ö†Ô∏è No products data found to insert.');
            }
        } catch (insertError: unknown) { // ‡∏£‡∏∞‡∏ö‡∏∏ Type ‡∏Ç‡∏≠‡∏á Error ‡πÄ‡∏õ‡πá‡∏ô unknown
            let errorMessage = 'An unknown error occurred.';
            if (insertError instanceof Error) { // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Error Object ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á .message
                errorMessage = insertError.message;
            }
            console.error('‚ùå Error inserting products:', errorMessage);
            console.error('Product data that caused error:', products); // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÉ‡∏™‡πà (‡πÄ‡∏û‡∏∑‡πà‡∏≠ Debug)
        }

        // Insert Partners
        try {
            if (partners && partners.length > 0) {
                const insertedPartners = await Partner.insertMany(partners);
                console.log(`‚úÖ Successfully inserted ${insertedPartners.length} partners.`);
            } else {
                console.warn('‚ö†Ô∏è No partners data found to insert.');
            }
        } catch (insertError: unknown) {
            let errorMessage = 'An unknown error occurred.';
            if (insertError instanceof Error) {
                errorMessage = insertError.message;
            }
            console.error('‚ùå Error inserting partners:', errorMessage);
            console.error('Partner data that caused error:', partners);
        }

        // Insert Categories
        try {
            if (categories && categories.length > 0) {
                const insertedCategories = await Category.insertMany(categories);
                console.log(`‚úÖ Successfully inserted ${insertedCategories.length} categories.`);
            } else {
                console.warn('‚ö†Ô∏è No categories data found to insert.');
            }
        } catch (insertError: unknown) {
            let errorMessage = 'An unknown error occurred.';
            if (insertError instanceof Error) {
                errorMessage = insertError.message;
            }
            console.error('‚ùå Error inserting categories:', errorMessage);
            console.error('Category data that caused error:', categories);
        }

        // Insert News Items
        try {
            if (newsItems && newsItems.length > 0) {
                const insertedNewsItems = await News.insertMany(newsItems);
                console.log(`‚úÖ Successfully inserted ${insertedNewsItems.length} news items.`);
            } else {
                console.warn('‚ö†Ô∏è No news items data found to insert.');
            }
        } catch (insertError: unknown) {
            let errorMessage = 'An unknown error occurred.';
            if (insertError instanceof Error) {
                errorMessage = insertError.message;
            }
            console.error('‚ùå Error inserting news items:', errorMessage);
            console.error('News data that caused error:', newsItems);
        }

        console.log('‚ú® Data seeding process completed.');

    } catch (mainError: unknown) { // ‡∏î‡∏±‡∏Å‡∏à‡∏±‡∏ö Error ‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô
        let errorMessage = 'An unknown fatal error occurred during seeding process.';
        if (mainError instanceof Error) {
            errorMessage = mainError.message;
        }
        console.error('üî• Fatal Error during seeding process:', errorMessage);
        console.error(mainError); // ‡πÅ‡∏™‡∏î‡∏á Error object ‡πÄ‡∏ï‡πá‡∏°‡πÜ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Debug
    } finally {
        if (mongoose.connection.readyState === 1) { // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¢‡∏π‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏õ‡∏¥‡∏î
            await mongoose.connection.close(); // ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Database
            console.log('MongoDB connection closed.');
        } else {
            console.log('MongoDB connection was not open or already closed.');
        }
    }
}

seedDatabase(); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Seeder